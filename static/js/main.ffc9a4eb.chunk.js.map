{"version":3,"sources":["OneComponent/ListView/ListView.jsx","OneComponent/TableView/TableView.jsx","OneComponent/Controller/SearchCreate.jsx","OneComponent/Controller/FilterController.jsx","OneComponent/Controller/ViewController.jsx","OneComponent/Controller/BulkController.jsx","OneComponent/Controller/Controller.jsx","OneComponent/CreateTodo/CreateTodo.jsx","OneComponent/EditTodo/EditTodo.jsx","OneComponent/todos/Index.jsx","App.jsx","index.js"],"names":["ListItem","todo","toggleSelect","toggleEdit","toggleComplete","ListGroupItem","className","CustomInput","type","id","checked","isChecked","onChange","text","description","time","toDateString","Button","onClick","color","isCompleted","ListView","todos","ListGroup","map","TableRow","TableView","Table","SearchCreate","this","props","handleSearch","searchTerm","toggleForm","Input","placeholder","value","Component","FilterController","handleFilter","filterColor","ButtonGroup","ViewController","handleView","view","name","BulkController","colorBulk","handleCompleted","handleSelected","reset","Controller","Row","Col","md","size","CreateTodo","state","handleChange","event","setState","target","handleSubmit","e","preventDefault","submitForm","Form","onSubmit","FormGroup","EditTodo","toggleUpdate","submitEditForm","useState","useEffect","Index","shortId","generate","Date","isOpenTodoCreate","filter","editTodoId","editText","editDes","isOpenTodoUpdate","todoId","find","Number","performSearch","toLowerCase","includes","performFilter","changeView","Container","Modal","isOpen","toggle","ModalHeader","ModalBody","App","React","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.ffc9a4eb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { ListGroupItem, CustomInput, Button, ListGroup } from \"reactstrap\";\r\nimport propTypes from \"prop-types\";\r\n\r\nconst ListItem = ({ todo, toggleSelect, toggleEdit, toggleComplete }) => {\r\n  return (\r\n    <>\r\n      <ListGroupItem className=\"d-flex align-items-center\">\r\n        <CustomInput\r\n          type=\"checkbox\"\r\n          id={todo.id}\r\n          checked={todo.isChecked}\r\n          onChange={() => toggleSelect(todo.id)}\r\n        ></CustomInput>\r\n\r\n        <div className=\"ms-3\">\r\n          <h3>{todo.text}</h3>\r\n          <p>{todo.description}</p>\r\n          <p>{todo.time.toDateString()}</p>\r\n        </div>\r\n\r\n        <Button\r\n          className=\"ms-auto\"\r\n          onClick={() => toggleEdit(todo.id)}\r\n          color=\"danger\"\r\n        >\r\n          Edit\r\n        </Button>\r\n\r\n        <Button\r\n          onClick={() => toggleComplete(todo.id)}\r\n          className=\"ms-3\"\r\n          color={todo.isCompleted ? \"danger\" : \"success\"}\r\n        >\r\n          {todo.isCompleted ? \"Completed\" : \"Running\"}\r\n        </Button>\r\n      </ListGroupItem>\r\n    </>\r\n  );\r\n};\r\n\r\nListItem.propTypes = {\r\n  todo: propTypes.object.isRequired,\r\n  toggleSelect: propTypes.func.isRequired,\r\n  toggleEdit: propTypes.func.isRequired,\r\n  toggleComplete: propTypes.func.isRequired,\r\n};\r\n\r\nconst ListView = ({ todos, toggleComplete, toggleEdit, toggleSelect }) => {\r\n  return (\r\n    <ListGroup>\r\n      {todos.map((todo) => {\r\n        return (\r\n          <ListItem\r\n            key={todo.id}\r\n            todo={todo}\r\n            toggleComplete={toggleComplete}\r\n            toggleSelect={toggleSelect}\r\n            toggleEdit={toggleEdit}\r\n          />\r\n        );\r\n      })}\r\n    </ListGroup>\r\n  );\r\n};\r\n\r\nListView.propTypes = {\r\n  todos: propTypes.array.isRequired,\r\n  toggleComplete: propTypes.func.isRequired,\r\n  toggleEdit: propTypes.func.isRequired,\r\n  toggleSelect: propTypes.func.isRequired,\r\n};\r\n\r\nexport default ListView;\r\n","import React from \"react\";\r\nimport { Table, CustomInput, Button } from \"reactstrap\";\r\nimport propTypes from \"prop-types\";\r\n\r\nconst TableRow = ({ todo, toggleSelect, toggleComplete, toggleEdit }) => {\r\n  return (\r\n    <>\r\n      <tr className=\"text-center\">\r\n        <td>\r\n          <CustomInput\r\n            id={todo.id}\r\n            type=\"checkbox\"\r\n            onChange={() => toggleSelect(todo.id)}\r\n            checked={todo.isChecked}\r\n          />\r\n        </td>\r\n        <td>{todo.text}</td>\r\n        <td>{todo.description}</td>\r\n        <td>{todo.time.toDateString()}</td>\r\n        <td>\r\n          <Button color=\"danger\" onClick={() => toggleEdit(todo.id)}>\r\n            Edit\r\n          </Button>\r\n        </td>\r\n        <td>\r\n          <Button\r\n            color={todo.isCompleted ? \"danger\" : \"success\"}\r\n            onClick={() => toggleComplete(todo.id)}\r\n          >\r\n            {todo.isCompleted ? \"Completed\" : \"Running\"}\r\n          </Button>\r\n        </td>\r\n      </tr>\r\n    </>\r\n  );\r\n};\r\n\r\nTableRow.propTypes = {\r\n  todo: propTypes.object.isRequired,\r\n  toggleComplete: propTypes.func.isRequired,\r\n  toggleEdit: propTypes.func.isRequired,\r\n  toggleSelect: propTypes.func.isRequired,\r\n};\r\n\r\nconst TableView = ({ todos, toggleSelect, toggleEdit, toggleComplete }) => {\r\n  return (\r\n    <Table>\r\n      <thead className=\"text-center\">\r\n        <tr>\r\n          <td>#</td>\r\n          <td>Title</td>\r\n          <td>Description</td>\r\n          <td>Date</td>\r\n          <td>Edit Button</td>\r\n          <td>Complete Button</td>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {todos.map((todo) => (\r\n          <TableRow\r\n            key={todo.id}\r\n            todo={todo}\r\n            toggleComplete={toggleComplete}\r\n            toggleEdit={toggleEdit}\r\n            toggleSelect={toggleSelect}\r\n          />\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nTableView.propTypes = {\r\n  todos: propTypes.array.isRequired,\r\n  toggleComplete: propTypes.func.isRequired,\r\n  toggleSelect: propTypes.func.isRequired,\r\n  toggleEdit: propTypes.func.isRequired,\r\n};\r\n\r\nexport default TableView;\r\n","import React, { Component } from \"react\";\r\nimport { Input, Button } from \"reactstrap\";\r\nimport propTypes from \"prop-types\";\r\n\r\nexport default class SearchCreate extends Component {\r\n  render() {\r\n    const { handleSearch, searchTerm, toggleForm } = this.props;\r\n    return (\r\n      <>\r\n        <div className=\"d-flex mb-1\">\r\n          <Input\r\n            type=\"text\"\r\n            onChange={handleSearch}\r\n            placeholder=\"Search your requirement\"\r\n            value={searchTerm}\r\n          ></Input>\r\n          <Button className=\"ms-2\" color=\"success\" onClick={toggleForm}>\r\n            New{\" \"}\r\n          </Button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nSearchCreate.propTypes = {\r\n  handleSearch: propTypes.func.isRequired,\r\n  searchTerm: propTypes.string.isRequired,\r\n  toggleForm: propTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport { ButtonGroup, Button } from \"reactstrap\";\r\nimport propTypes from \"prop-types\";\r\n\r\nconst FilterController = ({ handleFilter, filterColor }) => {\r\n  return (\r\n    <>\r\n      <ButtonGroup>\r\n        <Button\r\n          color={filterColor === \"all\" ? \"danger\" : \"success\"}\r\n          onClick={() => handleFilter(\"all\")}\r\n        >\r\n          All\r\n        </Button>\r\n        <Button\r\n          color={filterColor === \"completed\" ? \"danger\" : \"success\"}\r\n          onClick={() => handleFilter(\"completed\")}\r\n        >\r\n          Completed\r\n        </Button>\r\n        <Button\r\n          color={filterColor === \"running\" ? \"danger\" : \"success\"}\r\n          onClick={() => handleFilter(\"running\")}\r\n        >\r\n          Running\r\n        </Button>\r\n      </ButtonGroup>\r\n    </>\r\n  );\r\n};\r\n\r\nFilterController.propTypes = {\r\n  handleFilter: propTypes.func.isRequired,\r\n  filterColor: propTypes.string.isRequired,\r\n};\r\n\r\nexport default FilterController;\r\n","import React from \"react\";\r\nimport { CustomInput } from \"reactstrap\";\r\nimport propTypes from \"prop-types\";\r\n\r\nconst ViewController = ({ handleView, view }) => {\r\n  return (\r\n    <>\r\n      <div className=\"d-flex align-items-center\">\r\n        <CustomInput\r\n          type=\"radio\"\r\n          value=\"list\"\r\n          id=\"view\"\r\n          onChange={handleView}\r\n          className=\"me-2\"\r\n          name=\"view\"\r\n          checked={view === \"list\"}\r\n        />{\" \"}\r\n        List view\r\n        <CustomInput\r\n          name=\"view\"\r\n          type=\"radio\"\r\n          value=\"table\"\r\n          id=\"view\"\r\n          checked={view === \"table\"}\r\n          className=\"ms-3 me-2\"\r\n          onChange={handleView}\r\n        />{\" \"}\r\n        Table view\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nViewController.propTypes = {\r\n  handleView: propTypes.func.isRequired,\r\n  view: propTypes.string.isRequired,\r\n};\r\n\r\nexport default ViewController;\r\n","import React from \"react\";\r\nimport { ButtonGroup, Button } from \"reactstrap\";\r\nimport propTypes from \"prop-types\";\r\n\r\nconst BulkController = ({\r\n  colorBulk,\r\n  handleCompleted,\r\n  handleSelected,\r\n  reset,\r\n}) => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <ButtonGroup>\r\n          <Button\r\n            color={colorBulk === \"completed\" ? \"danger\" : \"success\"}\r\n            onClick={handleCompleted}\r\n          >\r\n            Clear Completed\r\n          </Button>\r\n\r\n          <Button\r\n            color={colorBulk === \"selected\" ? \"danger\" : \"success\"}\r\n            onClick={handleSelected}\r\n          >\r\n            Clear Selected\r\n          </Button>\r\n\r\n          <Button\r\n            color={colorBulk === \"reset\" ? \"danger\" : \"success\"}\r\n            onClick={reset}\r\n          >\r\n            Reset\r\n          </Button>\r\n        </ButtonGroup>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nBulkController.propTypes = {\r\n  colorBulk: propTypes.string.isRequired,\r\n  handleCompleted: propTypes.func.isRequired,\r\n  handleSelected: propTypes.func.isRequired,\r\n  reset: propTypes.func.isRequired,\r\n};\r\n\r\nexport default BulkController;\r\n","import React from \"react\";\r\nimport SearchCreate from \"./SearchCreate\";\r\nimport propTypes from \"prop-types\";\r\nimport FilterController from \"./FilterController\";\r\nimport ViewController from \"./ViewController\";\r\nimport BulkController from \"./BulkController\";\r\nimport { Row, Col } from \"reactstrap\";\r\n\r\nconst Controller = ({\r\n  handleSearch,\r\n  searchTerm,\r\n  toggleForm,\r\n  handleFilter,\r\n  handleView,\r\n  view,\r\n  colorBulk,\r\n  handleCompleted,\r\n  handleSelected,\r\n  reset,\r\n  filterColor,\r\n}) => {\r\n  return (\r\n    <>\r\n      <SearchCreate\r\n        handleSearch={handleSearch}\r\n        searchTerm={searchTerm}\r\n        toggleForm={toggleForm}\r\n      />\r\n\r\n      <Row>\r\n        <Col md={{ size: 4 }}>\r\n          <FilterController\r\n            handleFilter={handleFilter}\r\n            filterColor={filterColor}\r\n          />\r\n        </Col>\r\n        <Col md={{ size: 4 }}>\r\n          {\" \"}\r\n          <ViewController handleView={handleView} view={view} />{\" \"}\r\n        </Col>\r\n        <Col md={{ size: 4 }} className=\"ms-auto\">\r\n          <BulkController\r\n            colorBulk={colorBulk}\r\n            handleSelected={handleSelected}\r\n            handleCompleted={handleCompleted}\r\n            reset={reset}\r\n          />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nController.propTypes = {\r\n  handleSearch: propTypes.func.isRequired,\r\n  searchTerm: propTypes.string.isRequired,\r\n  toggleForm: propTypes.func.isRequired,\r\n  view: propTypes.string.isRequired,\r\n  filterColor: propTypes.string.isRequired,\r\n  colorBulk: propTypes.string.isRequired,\r\n  handleFilter: propTypes.func.isRequired,\r\n  handleView: propTypes.func.isRequired,\r\n  handleSelected: propTypes.func.isRequired,\r\n  handleCompleted: propTypes.func.isRequired,\r\n  reset: propTypes.func.isRequired,\r\n};\r\n\r\nexport default Controller;\r\n","import React, { Component } from \"react\";\r\nimport { Input, Button, Form, FormGroup } from \"reactstrap\";\r\nimport propTypes from \"prop-types\";\r\n\r\nexport default class CreateTodo extends Component {\r\n  state = {\r\n    text: \"\",\r\n    description: \"\",\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.submitForm(this.state);\r\n    this.setState({\r\n      text: \"\",\r\n      description: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <FormGroup>\r\n            <Input\r\n              type=\"text\"\r\n              name=\"text\"\r\n              placeholder=\"Enter ToDo Title\"\r\n              onChange={this.handleChange}\r\n              value={this.state.text}\r\n            />\r\n          </FormGroup>\r\n\r\n          <FormGroup>\r\n            <Input\r\n              className=\"my-2\"\r\n              type=\"textarea\"\r\n              name=\"description\"\r\n              placeholder=\"Enter ToDo description\"\r\n              value={this.state.description}\r\n              onChange={this.handleChange}\r\n            />\r\n          </FormGroup>\r\n          <Button color=\"success\" type=\"submit\">\r\n            Create ToDo\r\n          </Button>\r\n        </Form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nCreateTodo.propTypes = {\r\n  submitForm: propTypes.func.isRequired,\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Input, Button, Form, FormGroup } from \"reactstrap\";\r\nimport propTypes from \"prop-types\";\r\n\r\nconst EditTodo = ({ toggleUpdate, submitEditForm, id, text, description }) => {\r\n  const [state, setState] = useState({\r\n    text: \"\",\r\n    description: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    setState({\r\n      text: text,\r\n      description: description,\r\n    });\r\n  }, [id]);\r\n\r\n  const handleChange = (event) => {\r\n    setState(() => ({\r\n      ...state,\r\n      [event.target.name]: event.target.value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    submitEditForm(state);\r\n    setState({\r\n      text: \"\",\r\n      description: \"\",\r\n    });\r\n    toggleUpdate();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <FormGroup>\r\n          <Input\r\n            type=\"text\"\r\n            name=\"text\"\r\n            placeholder=\"Enter ToDo Title\"\r\n            onChange={handleChange}\r\n            value={state.text}\r\n          />\r\n        </FormGroup>\r\n\r\n        <FormGroup>\r\n          <Input\r\n            className=\"my-2\"\r\n            type=\"textarea\"\r\n            name=\"description\"\r\n            placeholder=\"Enter ToDo description\"\r\n            value={state.description}\r\n            onChange={handleChange}\r\n          />\r\n        </FormGroup>\r\n        <Button color=\"success\" type=\"submit\">\r\n          Update ToDo\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nEditTodo.propTypes = {\r\n  submitEditForm: propTypes.func.isRequired,\r\n  id: propTypes.number.isRequired,\r\n  text: propTypes.string.isRequired,\r\n  description: propTypes.string.isRequired,\r\n  toggleUpdate: propTypes.func.isRequired,\r\n};\r\n\r\nexport default EditTodo;\r\n","import React, { Component } from \"react\";\r\nimport shortId from \"shortid\";\r\nimport ListView from \"../ListView/ListView\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Container, Modal, ModalHeader, ModalBody } from \"reactstrap\";\r\nimport TableView from \"../TableView/TableView\";\r\nimport Controller from \"../Controller/Controller\";\r\nimport CreateTodo from \"../CreateTodo/CreateTodo\";\r\nimport EditTodo from \"../EditTodo/EditTodo\";\r\n\r\n// second attempt\r\nexport default class Index extends Component {\r\n  state = {\r\n    todos: [\r\n      {\r\n        id: shortId.generate(),\r\n        text: \"Todo title one\",\r\n        description: \"first description\",\r\n        time: new Date(),\r\n        isChecked: false,\r\n        isCompleted: false,\r\n      },\r\n      {\r\n        id: shortId.generate(),\r\n        text: \"Todo title two\",\r\n        description: \"second description\",\r\n        time: new Date(),\r\n        isChecked: false,\r\n        isCompleted: false,\r\n      },\r\n    ],\r\n    searchTerm: \"\",\r\n    isOpenTodoCreate: false,\r\n    view: \"list\",\r\n    filterColor: \"\",\r\n    colorBulk: \"\",\r\n    filter: \"all\",\r\n    editTodoId: \"\",\r\n    editText: \"\",\r\n    editDes: \"\",\r\n    isOpenTodoUpdate: false,\r\n  };\r\n\r\n  toggleComplete = (todoId) => {\r\n    const todos = [...this.state.todos];\r\n    const todo = todos.find((todo) => todo.id === todoId);\r\n    todo.isCompleted = !todo.isCompleted;\r\n    this.setState({ todos });\r\n  };\r\n\r\n  toggleSelect = (todoId) => {\r\n    const todos = [...this.state.todos];\r\n    const todo = todos.find((todo) => todo.id === todoId);\r\n    todo.isChecked = !todo.isChecked;\r\n    this.setState({ todos });\r\n  };\r\n\r\n  toggleEdit = (todoId) => {\r\n    const todos = this.state.todos.filter((todo) => todo.id !== todoId);\r\n    const todo = this.state.todos.find((todo) => todo.id === todoId);\r\n    this.setState({\r\n      editTodoId: todoId,\r\n      editText: todo.text,\r\n      editDes: todo.description,\r\n      todos,\r\n    });\r\n    this.toggleUpdate();\r\n  };\r\n\r\n  submitEditForm = (todo) => {\r\n    todo.id = Number(new Date());\r\n    todo.time = new Date();\r\n    todo.isChecked = false;\r\n    todo.isCompleted = false;\r\n\r\n    const todos = [todo, ...this.state.todos];\r\n    this.setState({\r\n      todos,\r\n    });\r\n  };\r\n\r\n  handleSearch = (event) => {\r\n    this.setState({\r\n      searchTerm: event.target.value,\r\n    });\r\n  };\r\n\r\n  performSearch = () => {\r\n    return this.state.todos.filter(\r\n      (todo) =>\r\n        todo.text.toLowerCase().includes(this.state.searchTerm.toLowerCase()) ||\r\n        todo.description\r\n          .toLowerCase()\r\n          .includes(this.state.searchTerm.toLowerCase()) ||\r\n        todo.time\r\n          .toDateString()\r\n          .toLowerCase()\r\n          .includes(this.state.searchTerm.toLowerCase())\r\n    );\r\n  };\r\n\r\n  toggleForm = () => {\r\n    this.setState({\r\n      isOpenTodoCreate: !this.state.isOpenTodoCreate,\r\n    });\r\n  };\r\n\r\n  submitForm = (todo) => {\r\n    todo.id = shortId.generate();\r\n    todo.time = new Date();\r\n    todo.isChecked = false;\r\n    todo.isCompleted = false;\r\n\r\n    const todos = [todo, ...this.state.todos];\r\n    this.setState({ todos: todos });\r\n    this.toggleForm();\r\n  };\r\n\r\n  handleFilter = (filter) => {\r\n    this.setState({\r\n      filter: filter,\r\n      filterColor: filter,\r\n    });\r\n  };\r\n\r\n  handleView = (event) => {\r\n    this.setState({\r\n      view: event.target.value,\r\n    });\r\n  };\r\n\r\n  performFilter = (todos) => {\r\n    const { filter } = this.state;\r\n\r\n    if (filter === \"completed\") {\r\n      return todos.filter((todo) => todo.isCompleted);\r\n    } else if (filter === \"running\") {\r\n      return todos.filter((todo) => !todo.isCompleted);\r\n    } else {\r\n      return todos;\r\n    }\r\n  };\r\n\r\n  toggleUpdate = () => {\r\n    this.setState({\r\n      isOpenTodoUpdate: !this.state.isOpenTodoUpdate,\r\n    });\r\n  };\r\n\r\n  changeView = () => {\r\n    const { view } = this.state;\r\n    let todos = this.performSearch();\r\n    todos = this.performFilter(todos);\r\n\r\n    if (view === \"list\") {\r\n      return (\r\n        <Container>\r\n          <ListView\r\n            todos={todos}\r\n            toggleEdit={this.toggleEdit}\r\n            toggleSelect={this.toggleSelect}\r\n            toggleComplete={this.toggleComplete}\r\n          />\r\n        </Container>\r\n      );\r\n    } else if (view === \"table\") {\r\n      return (\r\n        <Container>\r\n          <TableView\r\n            todos={todos}\r\n            toggleSelect={this.toggleSelect}\r\n            toggleEdit={this.toggleEdit}\r\n            toggleComplete={this.toggleComplete}\r\n          />\r\n        </Container>\r\n      );\r\n    }\r\n  };\r\n\r\n  handleSelected = () => {\r\n    const todos = this.state.todos.filter((todo) => !todo.isChecked);\r\n\r\n    this.setState({\r\n      todos: todos,\r\n      colorBulk: \"selected\",\r\n    });\r\n  };\r\n\r\n  handleCompleted = () => {\r\n    const todos = this.state.todos.filter((todo) => !todo.isCompleted);\r\n\r\n    this.setState({\r\n      todos,\r\n      colorBulk: \"completed\",\r\n    });\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      searchTerm: \"\",\r\n      isOpenTodoCreate: false,\r\n      view: \"list\",\r\n      filterColor: \"\",\r\n      colorBulk: \"\",\r\n      filter: \"all\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Container>\r\n          <p className=\"display-4 text-center my-3\">Atik's Todo App</p>\r\n        </Container>\r\n        <Container className=\"mb-1\">\r\n          <Controller\r\n            handleSearch={this.handleSearch}\r\n            searchTerm={this.state.searchTerm}\r\n            toggleForm={this.toggleForm}\r\n            view={this.state.view}\r\n            filterColor={this.state.filterColor}\r\n            colorBulk={this.state.colorBulk}\r\n            handleFilter={this.handleFilter}\r\n            handleView={this.handleView}\r\n            handleSelected={this.handleSelected}\r\n            handleCompleted={this.handleCompleted}\r\n            reset={this.reset}\r\n          />\r\n        </Container>\r\n        {this.changeView()}\r\n        <Modal isOpen={this.state.isOpenTodoCreate} toggle={this.toggleForm}>\r\n          <ModalHeader toggle={this.toggleForm}>Add New Todo</ModalHeader>\r\n          <ModalBody>\r\n            <CreateTodo submitForm={this.submitForm} />\r\n          </ModalBody>\r\n        </Modal>\r\n\r\n        <Modal isOpen={this.state.isOpenTodoUpdate} toggle={this.toggleUpdate}>\r\n          <ModalHeader toggle={this.toggleUpdate}>Edit ToDo</ModalHeader>\r\n          <ModalBody>\r\n            <EditTodo\r\n              submitEditForm={this.submitEditForm}\r\n              id={Number(this.state.editTodoId)}\r\n              text={this.state.editText}\r\n              description={this.state.editDes}\r\n              toggleUpdate={this.toggleUpdate}\r\n            />\r\n          </ModalBody>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Index from \"./OneComponent/todos/Index\";\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Index />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import ReactDom from \"react-dom\";\r\nimport React from \"react\";\r\nimport App from \"./App\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDom.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}